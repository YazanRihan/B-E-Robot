<launch>

	<arg name="robot_name" default="be" />
  <arg name="base_name" default="p3dx_base"/>
  <arg name="arm_name" default="cyton1500_arm"/>
  <arg name="robot_position" default="-x 0.0 -y 0.0 -z 0.01" />

  <!--group ns="$(arg robot_name)"-->
		<!-- LOAD MODEL -->
			<!-- Load the URDF into the ROS Parameter Server -->
			<param name="robot_description" command="$(find xacro)/xacro.py '$(find be_description)/urdf/be.urdf.xacro'" />
			
			<!--param name="robot_description" textfile="$(find p3dx_cyton1500_fusion)/xacro/p3dx_cyton1500_fusion.xacro" /-->

		<!-- P3DX CONTROL -->
			<!-- Run a python script to the send a service call to gazebo_ros to spawn a URDF robot -->
		  <node name="urdf_spawner" pkg="gazebo_ros" type="spawn_model" respawn="false" output="screen" args="-urdf -model $(arg robot_name) -param robot_description $(arg robot_position) "/>
		  
		  
		  <!--group ns="$(arg robot_name)"-->
		  <node pkg="robot_state_publisher" type="state_publisher" name="robot_state_publisher">
		    <param name="publish_frequency" type="double" value="30.0"/>
		    <!--param name="tf_prefix" type="string" value="$(arg robot_name)"/-->
		  </node>
		  
		<!-- CYTON1500 CONTROL 	-->
			<rosparam file="$(find cyton_gamma_pkg)/controllers_1500.yaml" command="load"/>
			<node name="controller_spawner" pkg="controller_manager" type="spawner" args="cyton_joint_trajectory_action_controller"/>
			<!--node name="robot_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher"/-->
  <!--/group-->
  
  
  
  <!--rosparam file="$(find cyton_1500_controllers)/gripper_controller.yaml" command="load"/-->
  
  
	<!--node name="another_cyton_controller_spawner" pkg="dynamixel_controllers" type="controller_spawner.py" args="-manager=cyton_manager -port port_0 -type=simple
		gripper_position_controller" output="screen"/>

	  <node name="another_cyton_action_controller_spawner" pkg="dynamixel_controllers" type="controller_spawner.py" args="-manager=cyton_manager -type=meta 
		gripper_position_controller" output="screen"/-->

  
  
  
  
  
  <!--include file="$(find fusion_moveit_config)/launch/planning_context.launch">
    <arg name="load_robot_description" value="true"/>
  </include-->

  <!-- If needed, broadcast static tf for robot root -->
  
  <!-- We do not have a robot connected, so publish fake joint states -->
  <!--node name="joint_state_publisher" pkg="joint_state_publisher" type="joint_state_publisher">
    <param name="/use_gui" value="false"/>
    <rosparam param="/source_list">[/move_group/fake_controller_joint_states]</rosparam>
  </node-->
  
</launch>
